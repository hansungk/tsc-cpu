$date
	Mon Apr 30 23:57:34 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_TB $end
$var event 1 ! testbench_finish $end
$var wire 16 " d_data [15:0] $end
$var wire 16 # output_port [15:0] $end
$var wire 16 $ num_inst [15:0] $end
$var wire 1 % is_halted $end
$var wire 1 & i_writeM $end
$var wire 1 ' i_readM $end
$var wire 16 ( i_data [15:0] $end
$var wire 16 ) i_address [15:0] $end
$var wire 1 * d_writeM $end
$var wire 1 + d_readM $end
$var wire 16 , d_address [15:0] $end
$var reg 16 - Passed [15:0] $end
$var reg 1 . clk $end
$var reg 16 / i [15:0] $end
$var reg 16 0 num_clock [15:0] $end
$var reg 1 1 reset_n $end
$scope module NUUT $end
$var wire 1 2 clk $end
$var wire 16 3 d_data [15:0] $end
$var wire 1 1 reset_n $end
$var wire 1 & i_writeM $end
$var wire 1 ' i_readM $end
$var wire 16 4 i_data [15:0] $end
$var wire 16 5 i_address [15:0] $end
$var wire 1 * d_writeM $end
$var wire 1 + d_readM $end
$var wire 16 6 d_address [15:0] $end
$var reg 16 7 d_outputData [15:0] $end
$var reg 16 8 i_outputData [15:0] $end
$upscope $end
$scope module UUT $end
$var wire 1 . clk $end
$var wire 16 9 d_data [15:0] $end
$var wire 16 : i_data [15:0] $end
$var wire 1 ; input_ready $end
$var wire 1 1 reset_n $end
$var wire 2 < reg_write_src [1:0] $end
$var wire 1 = reg_write $end
$var wire 2 > reg_dst [1:0] $end
$var wire 1 ? pc_write_cond $end
$var wire 1 @ pc_write $end
$var wire 2 A pc_src [1:0] $end
$var wire 1 B output_write $end
$var wire 16 C output_port [15:0] $end
$var wire 4 D opcode [3:0] $end
$var wire 16 E num_inst [15:0] $end
$var wire 1 % is_halted $end
$var wire 1 F ir_write $end
$var wire 1 & i_writeM $end
$var wire 1 ' i_readM $end
$var wire 1 G i_or_d $end
$var wire 16 H i_address [15:0] $end
$var wire 6 I func_code [5:0] $end
$var wire 1 * d_writeM $end
$var wire 1 + d_readM $end
$var wire 16 J d_address [15:0] $end
$var wire 1 K alu_src_swap $end
$var wire 2 L alu_src_b [1:0] $end
$var wire 1 M alu_src_a $end
$var wire 4 N alu_op [3:0] $end
$scope module Control $end
$var wire 1 . clk $end
$var wire 1 O isHLT $end
$var wire 1 P isTCP $end
$var wire 1 % is_halted $end
$var wire 1 1 reset_n $end
$var wire 4 Q opcode [3:0] $end
$var wire 6 R func_code [5:0] $end
$var wire 4 S alu_op [3:0] $end
$var reg 1 T ALUMode $end
$var reg 1 M alu_src_a $end
$var reg 2 U alu_src_b [1:0] $end
$var reg 1 K alu_src_swap $end
$var reg 1 V complete $end
$var reg 1 + d_mem_read $end
$var reg 1 * d_mem_write $end
$var reg 1 ' i_mem_read $end
$var reg 1 & i_mem_write $end
$var reg 1 G i_or_d $end
$var reg 3 W instType [2:0] $end
$var reg 1 F ir_write $end
$var reg 16 X num_inst [15:0] $end
$var reg 1 B output_write $end
$var reg 2 Y pc_src [1:0] $end
$var reg 1 @ pc_write $end
$var reg 1 ? pc_write_cond $end
$var reg 2 Z reg_dst [1:0] $end
$var reg 1 = reg_write $end
$var reg 2 [ reg_write_src [1:0] $end
$scope module ALUControl $end
$var wire 1 T ALUMode $end
$var wire 4 \ opcode [3:0] $end
$var wire 6 ] func_code [5:0] $end
$var reg 4 ^ alu_op [3:0] $end
$upscope $end
$upscope $end
$scope module DP $end
$var wire 2 _ addr1 [1:0] $end
$var wire 2 ` addr2 [1:0] $end
$var wire 4 a alu_op [3:0] $end
$var wire 1 M alu_src_a $end
$var wire 2 b alu_src_b [1:0] $end
$var wire 1 K alu_src_swap $end
$var wire 1 . clk $end
$var wire 16 c d_address [15:0] $end
$var wire 16 d d_data [15:0] $end
$var wire 1 e d_mem_read $end
$var wire 1 * d_mem_write $end
$var wire 16 f i_address [15:0] $end
$var wire 16 g i_data [15:0] $end
$var wire 1 h i_mem_read $end
$var wire 1 & i_mem_write $end
$var wire 1 G i_or_d $end
$var wire 1 ; input_ready $end
$var wire 1 F ir_write $end
$var wire 1 B output_write $end
$var wire 2 i pc_src [1:0] $end
$var wire 1 @ pc_write $end
$var wire 1 ? pc_write_cond $end
$var wire 2 j reg_dst [1:0] $end
$var wire 1 = reg_write $end
$var wire 2 k reg_write_src [1:0] $end
$var wire 1 1 reset_n $end
$var wire 16 l writeData [15:0] $end
$var wire 12 m target_addr [11:0] $end
$var wire 2 n rt [1:0] $end
$var wire 2 o rs [1:0] $end
$var wire 2 p rd [1:0] $end
$var wire 4 q opcode [3:0] $end
$var wire 8 r imm [7:0] $end
$var wire 6 s func_code [5:0] $end
$var wire 16 t data2 [15:0] $end
$var wire 16 u data1 [15:0] $end
$var wire 16 v alu_temp_2 [15:0] $end
$var wire 16 w alu_temp_1 [15:0] $end
$var wire 16 x alu_result [15:0] $end
$var wire 16 y alu_operand_2 [15:0] $end
$var wire 16 z alu_operand_1 [15:0] $end
$var wire 2 { addr3 [1:0] $end
$var reg 16 | IR [15:0] $end
$var reg 16 } MDR_wb [15:0] $end
$var reg 16 ~ a_ex [15:0] $end
$var reg 4 !" alu_op_ex [3:0] $end
$var reg 16 "" alu_out_ex [15:0] $end
$var reg 16 #" alu_out_wb [15:0] $end
$var reg 1 $" alu_src_a_ex $end
$var reg 2 %" alu_src_b_ex [1:0] $end
$var reg 1 &" alu_src_swap_ex $end
$var reg 16 '" b_ex [15:0] $end
$var reg 16 (" b_mem [15:0] $end
$var reg 1 )" d_mem_read_ex $end
$var reg 1 *" d_mem_read_mem $end
$var reg 1 +" d_mem_write_ex $end
$var reg 1 ," d_mem_write_mem $end
$var reg 1 -" i_mem_read_ex $end
$var reg 1 ." i_mem_read_mem $end
$var reg 1 /" i_mem_write_ex $end
$var reg 1 0" i_mem_write_mem $end
$var reg 16 1" imm_signed_ex [15:0] $end
$var reg 16 2" imm_signed_mem [15:0] $end
$var reg 16 3" imm_signed_wb [15:0] $end
$var reg 16 4" npc_ex [15:0] $end
$var reg 16 5" npc_id [15:0] $end
$var reg 16 6" num_inst [15:0] $end
$var reg 16 7" output_port [15:0] $end
$var reg 16 8" pc [15:0] $end
$var reg 16 9" pc_ex [15:0] $end
$var reg 16 :" pc_id [15:0] $end
$var reg 16 ;" pc_mem [15:0] $end
$var reg 16 <" pc_wb [15:0] $end
$var reg 16 =" rd_ex [15:0] $end
$var reg 2 >" reg_dst_ex [1:0] $end
$var reg 1 ?" reg_write_ex $end
$var reg 1 @" reg_write_mem $end
$var reg 1 A" reg_write_src_ex $end
$var reg 1 B" reg_write_src_mem $end
$var reg 1 C" reg_write_src_wb $end
$var reg 1 D" reg_write_wb $end
$var reg 16 E" rt_ex [15:0] $end
$var reg 16 F" write_reg_mem [15:0] $end
$var reg 16 G" write_reg_wb [15:0] $end
$scope module alu $end
$var wire 16 H" A [15:0] $end
$var wire 16 I" B [15:0] $end
$var wire 1 J" Cin $end
$var wire 4 K" OP [3:0] $end
$var reg 16 L" C [15:0] $end
$var reg 1 M" Cout $end
$var reg 17 N" res [16:0] $end
$upscope $end
$scope module rf $end
$var wire 2 O" addr1 [1:0] $end
$var wire 2 P" addr2 [1:0] $end
$var wire 2 Q" addr3 [1:0] $end
$var wire 1 . clk $end
$var wire 16 R" data1 [15:0] $end
$var wire 16 S" data2 [15:0] $end
$var wire 16 T" data3 [15:0] $end
$var wire 1 1 reset_n $end
$var wire 1 D" write $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
1M"
b1111111111111111 L"
bx K"
0J"
bx I"
bx H"
bx G"
bx F"
bx E"
xD"
xC"
xB"
xA"
x@"
x?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
bx ("
bx '"
x&"
bx %"
x$"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
b1111111111111111 x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
zh
bx g
bx f
ze
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
xV
bx U
xT
bx S
bx R
bx Q
xP
xO
bx N
xM
bx L
xK
bx J
bx I
bx H
xG
xF
bx E
bx D
bx C
xB
bx A
x@
x?
bx >
x=
bx <
z;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
12
11
bx 0
bx /
0.
b0 -
bx ,
x+
x*
bx )
bx (
x'
x&
x%
bx $
bx #
bx "
1!
$end
#25000
01
#50000
1M"
b0x z
b0x H"
b0x y
b0x I"
b0x v
b1 L
b1 U
b1 b
1M
bz "
bz 3
bz 9
bz d
0%
0O
0P
b11 W
1V
0B
0K
1T
0=
b1 >
b1 Z
b1 j
b10 A
b10 Y
b10 i
1?
1@
1F
0*
0&
0+
1'
0G
b1101 N
b1101 S
b1101 ^
b1101 a
b0 D
b0 Q
b0 \
b0 q
b0 I
b0 R
b0 ]
b0 s
b0 u
b0 R"
b0 _
b0 O"
b0 o
b0 t
b0 S"
b0 `
b0 P"
b0 n
b0 p
b0 r
b0 m
b0 w
b0 $
b0 E
b0 X
bz #
bz C
bz 7"
b0 ,
b0 6
b0 J
b0 c
b0 ""
b0 ("
b0 '"
b0 ~
b0 }
b0 |
b0 4"
b0 5"
b0 )
b0 5
b0 H
b0 f
b0 8"
b0 0
02
1.
#100000
12
0.
#150000
02
1.
#175000
11
#200000
b1001000000100011 (
b1001000000100011 4
b1001000000100011 :
b1001000000100011 g
b1001000000100011 8
12
0.
#250000
b100 W
1V
0T
b1 A
b1 Y
b1 i
0?
1'
b0 N
b0 S
b0 ^
b0 a
b1001 D
b1001 Q
b1001 \
b1001 q
b100011 I
b100011 R
b100011 ]
b100011 s
b100011 r
b100011 m
b0 z
b0 H"
b0 y
b0 I"
b0 v
b0 x
b0 L"
0M"
b1 $
b1 E
b1 X
b1001000000100011 |
0?"
0+"
0/"
z)"
z-"
b1 >"
0&"
b1 %"
1$"
b1101 !"
b1101 K"
bz }
b1111111111111111 ,
b1111111111111111 6
b1111111111111111 J
b1111111111111111 c
b1111111111111111 ""
b0 1"
b0 :"
b1 5"
b1 )
b1 5
b1 H
b1 f
b1 8"
b111000 /
b1 0
02
1.
#300000
b1 (
b1 4
b1 :
b1 g
b1 8
12
0.
#350000
b1101 N
b1101 S
b1101 ^
b1101 a
1?
1T
b11 W
1V
b10 A
b10 Y
b10 i
1'
b0 D
b0 Q
b0 \
b0 q
b1 I
b1 R
b1 ]
b1 s
b1 r
b1 m
b0 N"
b1 |
0@"
0,"
00"
z*"
z."
b0 !"
b0 K"
b0 2"
b0 ,
b0 6
b0 J
b0 c
b0 ""
b10001100000000 1"
b0 9"
b1 4"
b1 :"
b10 5"
b10 )
b10 5
b10 H
b10 f
b10 8"
b10 $
b10 E
b10 X
b111000 /
b10 0
02
1.
#400000
b1111111111111111 (
b1111111111111111 4
b1111111111111111 :
b1111111111111111 g
b1111111111111111 8
12
0.
#450000
b1 <
b1 [
b1 k
b0 W
0V
1T
b0 A
b0 Y
b0 i
0?
1'
b0 N
b0 S
b0 ^
b0 a
b1111 D
b1111 Q
b1111 \
b1111 q
b111111 I
b111111 R
b111111 ]
b111111 s
b11 _
b11 O"
b11 o
b11 `
b11 P"
b11 n
b11 p
b11111111 r
b111111111111 m
b11 $
b11 E
b11 X
b1111111111111111 |
0D"
b1101 !"
b1101 K"
b0 3"
b10001100000000 2"
b0 ;"
b100000000 1"
b1 9"
b10 4"
b10 :"
b11 5"
b11 )
b11 5
b11 H
b11 f
b11 8"
b111000 /
b11 0
02
1.
#500000
b0 (
b0 4
b0 :
b0 g
b0 8
12
0.
#550000
1?
b10 A
b10 Y
b10 i
1V
b11 W
1T
1'
b1101 N
b1101 S
b1101 ^
b1101 a
b0 D
b0 Q
b0 \
b0 q
b0 I
b0 R
b0 ]
b0 s
b0 _
b0 O"
b0 o
b0 `
b0 P"
b0 n
b0 p
b0 r
b0 m
b0 |
1A"
b0 !"
b0 K"
b10001100000000 3"
b0 <"
b100000000 2"
b1 ;"
b1111111100000000 1"
b10 9"
b11 4"
b11 :"
b100 5"
b100 )
b100 5
b100 H
b100 f
b100 8"
1!
b111000 /
b100 0
02
1.
